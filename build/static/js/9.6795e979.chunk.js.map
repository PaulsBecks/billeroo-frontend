{"version":3,"sources":["services/backend/emailInvoice.js","services/sendInvoice.js","components/SendEmailInvoiceModal/SendEmailInvoiceModal.js","components/Invoices/Invoices.js","components/Invoices/index.js"],"names":["url","config","backendURL","emailInvoice","data","a","Axios","post","res","console","log","sendInvoice","id","options","createInvoice","pdf","output","SendEmailInvoiceModal","invoice","setInvoice","onSend","useState","to","fileName","invoiceNumber","form","setForm","isSending","setIsSending","RichTextEditor","createValueFromString","customer","shippingAddress","text","setText","Modal","open","onClose","Header","Content","Form","Input","label","name","value","placeholder","onChange","e","Field","control","Editor","Actions","Button","negative","icon","labelPosition","content","onClick","primary","toString","loading","useInvoices","invoices","removeInvoice","updateInvoice","invoiceDownloadSelected","setInvoiceDownloadSelected","invoiceEmailSelected","setInvoiceEmailSelected","useGA","history","useHistory","path","useRouteMatch","useEffect","printInvoice","print","exact","className","push","Table","celled","Row","HeaderCell","Body","map","i","key","Cell","formatDate","invoiceDate","articles","formatPrice","totalPrice","style","marginBottom","Group","display","alignItems","margin","Checkbox","checked","Date","undefined","payed","toggle","paymentDate","selected","v","ReactDatePicker","dateFormat","transparent","marginLeft","secondary","borderLeft","marginRight","position","opacity","SinglePage","InvoiceNew","InvoiceDetail"],"mappings":"0UAKMA,EAFiBC,cAAfC,WAEiB,iBAEV,SAAeC,EAA9B,kC,4CAAe,WAA4BC,GAA5B,eAAAC,EAAA,sEACKC,IAAMC,KAAKP,EAAKI,GADrB,OACPI,EADO,OAEbC,QAAQC,IAAIF,GAFC,4C,sBCLA,SAAeG,EAA9B,oC,4CAAe,WAA2BC,EAAIC,GAA/B,iBAAAR,EAAA,sEACKS,YAAcF,GADnB,OACPG,EADO,OAETX,EAAOW,EAAIC,OAAO,iBACtBb,EAAa,aACXC,QACGS,IALQ,4C,4DCGA,SAASI,EAAT,GAAiE,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,WAAYC,EAAU,EAAVA,OAAU,EACrDC,mBAAS,CAC/BC,GAAI,GACJC,SAAUL,EAAQM,gBAHyD,mBACtEC,EADsE,KAChEC,EADgE,OAM3CL,oBAAS,GANkC,mBAMtEM,EANsE,KAM3DC,EAN2D,OAQrDP,mBACtBQ,IAAeC,sBACb,wCACEZ,EAAQa,SAASC,gBACnB,SAZyE,mBAQtEC,EARsE,KAQhEC,EARgE,KAgB7E,OACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,EAAMC,QAAS,kBAAMlB,MAChC,kBAACgB,EAAA,EAAMG,OAAP,4CACA,kBAACH,EAAA,EAAMI,QAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CACEC,MAAM,KACNC,KAAK,KACLC,MAAOnB,EAAKH,GACZuB,YAAY,0BACZC,SAAU,SAACC,EAAD,OAAMJ,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAZ,OACRlB,EAAQ,eAAKD,EAAN,eAAakB,EAAOC,QAG/B,kBAACJ,EAAA,EAAKC,MAAN,CACEC,MAAM,qBACNC,KAAK,WACLC,MAAOnB,EAAKF,SACZuB,SAAU,SAACC,EAAD,OAAMJ,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,MAAZ,OACRlB,EAAQ,eAAKD,EAAN,eAAakB,EAAOC,QAG/B,kBAACJ,EAAA,EAAKQ,MAAN,CACEN,MAAM,YACNC,KAAK,OACLC,MAAOX,EACPgB,QAASC,IACTJ,SAAUZ,MAIhB,kBAACC,EAAA,EAAMgB,QAAP,KACE,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,QACLC,cAAc,QACdC,QAAQ,YACRC,QAAS,kBAAMtC,OAEjB,kBAACiC,EAAA,EAAD,CACEM,SAAO,EACPJ,KAAK,OACLC,cAAc,QACdC,QAAQ,SACRC,QAAS,WACP7B,GAAa,GACbR,EAAO,aAAEa,KAAMA,EAAK0B,SAAS,SAAYlC,KAE3CmC,QAASjC,M,UCtDJ,aAAO,IAAD,EACgCkC,cADhC,mBACZC,EADY,KACAC,EADA,KACeC,EADf,OAE2C3C,qBAF3C,mBAEZ4C,EAFY,KAEaC,EAFb,OAGqC7C,qBAHrC,mBAGZ8C,EAHY,KAGUC,EAHV,KAInBC,cACA,IAAMC,EAAUC,cACVC,EAASC,cAATD,KANa,4CAkBnB,WAAoB3D,GAApB,SAAAR,EAAA,sEACQM,EAAY,aAAcE,GADlC,OAEEuD,IAFF,4CAlBmB,sBAuBnB,OAfAM,qBAAU,WACJT,GAAyB,uCAC3B,sBAAA5D,EAAA,sEACQsE,YAAa,aAAcV,EAAwBzC,eAD3D,OAEE0C,IAFF,2CAD2B,oDAK3BU,KAED,CAACX,IAQF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,OAAK,EAACL,KAAMA,GACjB,yBAAKM,UAAU,yBACb,kBAAC1B,EAAA,EAAD,CAAQK,QAAS,kBAAMa,EAAQS,KAAR,UAAgBP,EAAhB,UAA6Bd,SAAO,GAA3D,iBAGA,kBAACsB,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAM1C,OAAP,KACE,kBAAC0C,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMG,WAAP,wBACA,kBAACH,EAAA,EAAMG,WAAP,uBACA,kBAACH,EAAA,EAAMG,WAAP,cACA,kBAACH,EAAA,EAAMG,WAAP,gBACA,kBAACH,EAAA,EAAMG,WAAP,oBACA,kBAACH,EAAA,EAAMG,WAAP,wBACA,kBAACH,EAAA,EAAMG,WAAP,QAIJ,kBAACH,EAAA,EAAMI,KAAP,KACGtB,EAASuB,KACR,SAACC,GAAD,OACEA,GACa,kBAANA,GACL,kBAACN,EAAA,EAAME,IAAP,CAAWK,IAAKD,EAAE1E,IAChB,kBAACoE,EAAA,EAAMQ,KAAP,KAAaF,EAAE9D,eACf,kBAACwD,EAAA,EAAMQ,KAAP,KAAaC,YAAWH,EAAEI,cAC1B,kBAACV,EAAA,EAAMQ,KAAP,KAAaF,EAAEvD,SAASY,MACxB,kBAACqC,EAAA,EAAMQ,KAAP,KACGF,EAAEK,SAASN,KAAI,SAAChF,GAAD,OACd,2BAAIA,EAAEsC,UAGV,kBAACqC,EAAA,EAAMQ,KAAP,KAAaI,YAAYN,EAAEO,YAA3B,WACA,kBAACb,EAAA,EAAMQ,KAAP,KACE,kBAAChD,EAAA,EAAD,CAAMsD,MAAO,CAAEC,aAAc,IAC3B,kBAACvD,EAAA,EAAKwD,MAAN,CACEF,MAAO,CACLG,QAAS,OACTC,WAAY,SACZC,OAAQ,MAGV,kBAACC,EAAA,EAAD,CACEtD,SAAU,SAACC,EAAD,GAA2B,IACtB,EAMN,EAPOJ,EAAoB,EAApBA,KAAM0D,EAAc,EAAdA,QAChBA,EACFrC,EAAc,eACTsB,GADQ,mBAEV3C,EAAO0D,GAFG,4BAGE,IAAIC,MAHN,KAMbtC,EAAc,eACTsB,GADQ,mBAEV3C,EAAO0D,GAFG,iCAGEE,GAHF,MAOjB5D,KAAK,QACL0D,QAASf,EAAEkB,MACXC,QAAM,IAEPnB,EAAEoB,YACD,kBAAClE,EAAA,EAAKQ,MAAN,CACE2D,SAAU,IAAIL,KAAKhB,EAAEoB,aACrB5D,SAAU,SAAC8D,GAAD,OACR5C,EAAc,eAAKsB,EAAN,CAASoB,YAAaE,MAErC3D,QAAS4D,IACTC,WAAW,aACXC,aAAW,IAGb,0BAAMjB,MAAO,CAAEkB,WAAY,UAA3B,iBAOR,kBAAChC,EAAA,EAAMQ,KAAP,CAAYM,MAAO,IACjB,kBAAC1C,EAAA,EAAD,CACEM,SAAO,EACPJ,KAAK,OACLG,QAAS,kBAAMa,EAAQS,KAAR,UAAgBP,EAAhB,YAAwBc,EAAE1E,QAE3C,kBAACwC,EAAA,EAAO4C,MAAR,KACE,kBAAC5C,EAAA,EAAD,CACE6D,WAAS,EACT3D,KAAK,WACLG,QAAS,kBAAMS,EAA2BoB,MAE5C,kBAAClC,EAAA,EAAD,CACE0C,MAAO,CACLoB,WAAY,kBACZC,YAAa,OAEfF,WAAS,EACT3D,KAAK,OACLG,QAAS,kBAAMW,EAAwBkB,OAE3B,IAChB,kBAAClC,EAAA,EAAD,CACEC,UAAQ,EACRC,KAAK,QACLG,QAAS,kBAAMM,EAAcuB,EAAE1E,cAQ/C,yBAAKkF,MAAO,CAAEsB,SAAU,WAAYC,QAAS,SACzCpD,GAA2BE,IAC3B,kBAACmD,EAAA,EAAD,CACE1G,GAAG,aACHM,QAAS+C,GAA2BE,KAIzCA,GACC,kBAAClD,EAAD,CACEC,QAASiD,EACThD,WAAYiD,EACZhD,OAtJO,gDA2Jf,kBAAC,IAAD,CAAOyD,OAAK,EAACL,KAAI,UAAKA,EAAL,SACf,kBAAC+C,EAAA,EAAD,CAAYvD,cAAeA,KAE7B,kBAAC,IAAD,CAAOQ,KAAI,UAAKA,EAAL,gBACT,kBAACgD,EAAA,EAAD,CAAexD,cAAeA,OC9KtC","file":"static/js/9.6795e979.chunk.js","sourcesContent":["import config from \"../../config\";\nimport Axios from \"axios\";\n\nconst { backendURL } = config();\n\nconst url = backendURL + \"/email/invoice\";\n\nexport default async function emailInvoice(data) {\n  const res = await Axios.post(url, data);\n  console.log(res);\n}\n","import createInvoice from \"./createInvoice\";\nimport emailInvoice from \"./backend/emailInvoice\";\nexport default async function sendInvoice(id, options) {\n  const pdf = await createInvoice(id);\n  var data = pdf.output(\"datauristring\");\n  emailInvoice({\n    data,\n    ...options,\n  });\n}\n","import React, { useState } from \"react\";\nimport { Modal, Form, Button } from \"semantic-ui-react\";\nimport Editor from \"../Editor/Editor\";\nimport RichTextEditor from \"react-rte\";\n\nexport default function SendEmailInvoiceModal({ invoice, setInvoice, onSend }) {\n  const [form, setForm] = useState({\n    to: \"\",\n    fileName: invoice.invoiceNumber,\n  });\n\n  const [isSending, setIsSending] = useState(false);\n\n  const [text, setText] = useState(\n    RichTextEditor.createValueFromString(\n      `<b>Versandadresse des Kunden</b><br/>` +\n        invoice.customer.shippingAddress,\n      \"html\"\n    )\n  );\n\n  return (\n    <Modal open={true} onClose={() => setInvoice()}>\n      <Modal.Header>Rechnungs-PDF per Email Verschicken</Modal.Header>\n      <Modal.Content>\n        <Form>\n          <Form.Input\n            label=\"An\"\n            name=\"to\"\n            value={form.to}\n            placeholder=\"max-mustermann@email.de\"\n            onChange={(e, { name, value }) =>\n              setForm({ ...form, [name]: value })\n            }\n          />\n          <Form.Input\n            label=\"Rechnungsdateiname\"\n            name=\"fileName\"\n            value={form.fileName}\n            onChange={(e, { name, value }) =>\n              setForm({ ...form, [name]: value })\n            }\n          />\n          <Form.Field\n            label=\"Emailtext\"\n            name=\"text\"\n            value={text}\n            control={Editor}\n            onChange={setText}\n          />\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          negative\n          icon=\"close\"\n          labelPosition=\"right\"\n          content=\"Abbrechen\"\n          onClick={() => setInvoice()}\n        />\n        <Button\n          primary\n          icon=\"send\"\n          labelPosition=\"right\"\n          content=\"Senden\"\n          onClick={() => {\n            setIsSending(true);\n            onSend({ text: text.toString(\"html\"), ...form });\n          }}\n          loading={isSending}\n        />\n      </Modal.Actions>\n    </Modal>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useInvoices, useGA } from \"../../hooks\";\n\nimport { Button, Table, Checkbox, Form, Modal } from \"semantic-ui-react\";\nimport { formatDate, formatPrice, printInvoice } from \"../../services\";\nimport SinglePage from \"../SinglePage/SinglePage\";\nimport { Switch, Route, useRouteMatch, useHistory } from \"react-router\";\nimport InvoiceNew from \"../../pages/InvoiceNew/InvoiceNew\";\nimport InvoiceDetail from \"../../pages/InvoiceDetail/InvoiceDetail\";\nimport ReactDatePicker from \"react-datepicker\";\nimport sendInvoice from \"../../services/sendInvoice\";\nimport SendEmailInvoiceModal from \"../SendEmailInvoiceModal/SendEmailInvoiceModal\";\n\nimport { monochromaticColors } from \"../../constants\";\n\nexport default () => {\n  const [invoices, , removeInvoice, updateInvoice] = useInvoices();\n  const [invoiceDownloadSelected, setInvoiceDownloadSelected] = useState();\n  const [invoiceEmailSelected, setInvoiceEmailSelected] = useState();\n  useGA();\n  const history = useHistory();\n  let { path } = useRouteMatch();\n\n  useEffect(() => {\n    if (invoiceDownloadSelected) {\n      async function print() {\n        await printInvoice(\"singlePage\", invoiceDownloadSelected.invoiceNumber);\n        setInvoiceDownloadSelected();\n      }\n      print();\n    }\n  }, [invoiceDownloadSelected]);\n\n  async function send(options) {\n    await sendInvoice(\"singlePage\", options);\n    setInvoiceEmailSelected();\n  }\n\n  return (\n    <Switch>\n      <Route exact path={path}>\n        <div className=\"invoice-tab-container\">\n          <Button onClick={() => history.push(`${path}/new`)} primary>\n            Neue Rechnung\n          </Button>\n          <Table celled>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Rechnungsnummer</Table.HeaderCell>\n                <Table.HeaderCell>Rechnungsdatum</Table.HeaderCell>\n                <Table.HeaderCell>Kunde</Table.HeaderCell>\n                <Table.HeaderCell>Artikel</Table.HeaderCell>\n                <Table.HeaderCell>Gesamtpreis</Table.HeaderCell>\n                <Table.HeaderCell>Zahlungseingang</Table.HeaderCell>\n                <Table.HeaderCell></Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n              {invoices.map(\n                (i) =>\n                  i &&\n                  typeof i === \"object\" && (\n                    <Table.Row key={i.id}>\n                      <Table.Cell>{i.invoiceNumber}</Table.Cell>\n                      <Table.Cell>{formatDate(i.invoiceDate)}</Table.Cell>\n                      <Table.Cell>{i.customer.name}</Table.Cell>\n                      <Table.Cell>\n                        {i.articles.map((a) => (\n                          <p>{a.name}</p>\n                        ))}\n                      </Table.Cell>\n                      <Table.Cell>{formatPrice(i.totalPrice)} €</Table.Cell>\n                      <Table.Cell>\n                        <Form style={{ marginBottom: 0 }}>\n                          <Form.Group\n                            style={{\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              margin: \"0\",\n                            }}\n                          >\n                            <Checkbox\n                              onChange={(e, { name, checked }) => {\n                                if (checked) {\n                                  updateInvoice({\n                                    ...i,\n                                    [name]: checked,\n                                    paymentDate: new Date(),\n                                  });\n                                } else {\n                                  updateInvoice({\n                                    ...i,\n                                    [name]: checked,\n                                    paymentDate: undefined,\n                                  });\n                                }\n                              }}\n                              name=\"payed\"\n                              checked={i.payed}\n                              toggle\n                            />\n                            {i.paymentDate ? (\n                              <Form.Field\n                                selected={new Date(i.paymentDate)}\n                                onChange={(v) =>\n                                  updateInvoice({ ...i, paymentDate: v })\n                                }\n                                control={ReactDatePicker}\n                                dateFormat=\"dd/MM/yyyy\"\n                                transparent\n                              />\n                            ) : (\n                              <span style={{ marginLeft: \"0.5em\" }}>\n                                Ausstehend\n                              </span>\n                            )}\n                          </Form.Group>\n                        </Form>\n                      </Table.Cell>\n                      <Table.Cell style={{}}>\n                        <Button\n                          primary\n                          icon=\"edit\"\n                          onClick={() => history.push(`${path}/${i.id}`)}\n                        ></Button>\n                        <Button.Group>\n                          <Button\n                            secondary\n                            icon=\"download\"\n                            onClick={() => setInvoiceDownloadSelected(i)}\n                          ></Button>\n                          <Button\n                            style={{\n                              borderLeft: \"1px solid white\",\n                              marginRight: \"2px\",\n                            }}\n                            secondary\n                            icon=\"mail\"\n                            onClick={() => setInvoiceEmailSelected(i)}\n                          ></Button>\n                        </Button.Group>{\" \"}\n                        <Button\n                          negative\n                          icon=\"trash\"\n                          onClick={() => removeInvoice(i.id)}\n                        ></Button>\n                      </Table.Cell>\n                    </Table.Row>\n                  )\n              )}\n            </Table.Body>\n          </Table>\n          <div style={{ position: \"absolute\", opacity: \"0.0\" }}>\n            {(invoiceDownloadSelected || invoiceEmailSelected) && (\n              <SinglePage\n                id=\"singlePage\"\n                invoice={invoiceDownloadSelected || invoiceEmailSelected}\n              />\n            )}\n          </div>\n          {invoiceEmailSelected && (\n            <SendEmailInvoiceModal\n              invoice={invoiceEmailSelected}\n              setInvoice={setInvoiceEmailSelected}\n              onSend={send}\n            />\n          )}\n        </div>\n      </Route>\n      <Route exact path={`${path}/new`}>\n        <InvoiceNew updateInvoice={updateInvoice} />\n      </Route>\n      <Route path={`${path}/:invoiceId`}>\n        <InvoiceDetail updateInvoice={updateInvoice} />\n      </Route>\n    </Switch>\n  );\n};\n","export { default } from \"./Invoices\";\n"],"sourceRoot":""}